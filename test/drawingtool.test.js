const { JSDOM } = require('jsdom');

const { window } = new JSDOM('<!doctype html><html><body><canvas id="gridCanvas"></canvas><canvas id="canvas2"></canvas><canvas id="layoutCanvas"></canvas><canvas id="pixelCanvas"></canvas></body></html>');
global.document = window.document;
global.window = window;
global.MouseEvent = window.MouseEvent;

//generated by keploy 

describe('Drawing Tool', () => {
    let layoutCanvas, layoutCtx, pixelCanvas, pixelCtx;
    let rect, startX, startY, endX, endY;

    beforeEach(() => {
        layoutCanvas = document.getElementById('layoutCanvas');
        layoutCtx = layoutCanvas.getContext('2d');
        pixelCanvas = document.getElementById('pixelCanvas');
        pixelCtx = pixelCanvas.getContext('2d');

        // Initialize variables
        rect = {};
        startX = 0;
        startY = 0;
        endX = 0;
        endY = 0;

        // Mock event listeners
        layoutCanvas.addEventListener('mousedown', (event) => {
            startX = event.clientX - layoutCanvas.getBoundingClientRect().left;
            startY = event.clientY - layoutCanvas.getBoundingClientRect().top;
            rect = { startX, startY };
        });

        layoutCanvas.addEventListener('mousemove', (event) => {
            endX = event.clientX - layoutCanvas.getBoundingClientRect().left;
            endY = event.clientY - layoutCanvas.getBoundingClientRect().top;
            rect = { ...rect, endX, endY };
        });
    });
    //generated by keploy 

    test('rect should be defined on mousedown', () => {
        const event = new window.MouseEvent('mousedown', {
            clientX: 100,
        });
        layoutCanvas.dispatchEvent(event);
        expect(rect).toBeDefined();
    });
    //generated by keploy 

    test('rect should have correct startX and startY on mousedown', () => {
        const event = new window.MouseEvent('mousedown', {
            clientX: 100,
            clientY: 100,
        });
        layoutCanvas.dispatchEvent(event);
        expect(startX).toBe(100 - layoutCanvas.getBoundingClientRect().left);
        expect(startY).toBe(100 - layoutCanvas.getBoundingClientRect().top);
    });
    //generated by keploy 
    
    test('rect should update endX and endY on mousemove', () => {
        const mousedownEvent = new window.MouseEvent('mousedown', {
            clientX: 100,
            clientY: 100,
        });
        layoutCanvas.dispatchEvent(mousedownEvent);
        const mousemoveEvent = new window.MouseEvent('mousemove', {
            clientX: 200,
            clientY: 200,
        });
        layoutCanvas.dispatchEvent(mousemoveEvent);
        expect(endX).toBe(200 - layoutCanvas.getBoundingClientRect().left);
        expect(endY).toBe(200 - layoutCanvas.getBoundingClientRect().top);
    });
});